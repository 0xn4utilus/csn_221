$date
	Sat Oct 22 17:50:43 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module finalTestBench $end
$var wire 1 ! rst $end
$var reg 1 " clk $end
$scope module topLevel $end
$var wire 32 # SrcAE [31:0] $end
$var wire 32 $ SrcBE [31:0] $end
$var wire 1 " clk $end
$var wire 1 % hazardDetected $end
$var wire 1 & readEnable $end
$var wire 1 ! rst $end
$var wire 32 ' valueInput [31:0] $end
$var wire 1 ( writeEnable $end
$var wire 32 ) valueOutput2R [31:0] $end
$var wire 32 * valueOutput1R [31:0] $end
$var wire 32 + signImmE [31:0] $end
$var wire 32 , signImmD [31:0] $end
$var wire 1 - regWriteE $end
$var wire 1 . regWriteD $end
$var wire 1 / regDstE $end
$var wire 1 0 regDstD $end
$var wire 1 1 memWriteE $end
$var wire 1 2 memWriteD $end
$var wire 1 3 memToRegE $end
$var wire 1 4 memToRegD $end
$var wire 32 5 instructionD [31:0] $end
$var wire 32 6 instruction [31:0] $end
$var wire 5 7 index2 [4:0] $end
$var wire 5 8 index1 [4:0] $end
$var wire 1 9 flag2 $end
$var wire 1 : flag1 $end
$var wire 1 ; flag $end
$var wire 1 < equalD $end
$var wire 32 = data22 [31:0] $end
$var wire 32 > data2 [31:0] $end
$var wire 32 ? data11 [31:0] $end
$var wire 32 @ data1 [31:0] $end
$var wire 1 A branchD $end
$var wire 5 B RtE [4:0] $end
$var wire 5 C RtD [4:0] $end
$var wire 5 D RsE [4:0] $end
$var wire 5 E RsD [4:0] $end
$var wire 5 F RdE [4:0] $end
$var wire 5 G RdD [4:0] $end
$var wire 32 H PCbranchD [31:0] $end
$var wire 1 I PCSrcD $end
$var wire 32 J PCReg [31:0] $end
$var wire 32 K PC [31:0] $end
$var wire 1 L BNEType $end
$var wire 32 M AluOutE [31:0] $end
$var wire 1 N ALUSrcE $end
$var wire 1 O ALUSrcD $end
$var wire 2 P ALUOpE [1:0] $end
$var wire 2 Q ALUOp [1:0] $end
$var wire 4 R ALUControlE [3:0] $end
$var wire 4 S ALUControlD [3:0] $end
$scope module ALU $end
$var wire 32 T input1 [31:0] $end
$var wire 32 U input2 [31:0] $end
$var wire 4 V ex_cmd [3:0] $end
$var wire 1 A branchD $end
$var wire 2 W ALUOp [1:0] $end
$var reg 32 X alu_out [31:0] $end
$var reg 1 Y branchPresent $end
$var reg 1 ; flag $end
$upscope $end
$scope module IDtoExe_top $end
$var wire 1 " clk $end
$var wire 32 Z signImmD [31:0] $end
$var wire 1 . regWriteD $end
$var wire 1 0 regDstD $end
$var wire 1 2 memWriteD $end
$var wire 1 4 memToRegD $end
$var wire 32 [ data2 [31:0] $end
$var wire 32 \ data1 [31:0] $end
$var wire 5 ] RtD [4:0] $end
$var wire 5 ^ RsD [4:0] $end
$var wire 5 _ RdD [4:0] $end
$var wire 1 O ALUSrcD $end
$var wire 2 ` ALUOp [1:0] $end
$var wire 4 a ALUControlD [3:0] $end
$var reg 4 b ALUControlE [3:0] $end
$var reg 2 c ALUOpE [1:0] $end
$var reg 1 N ALUSrcE $end
$var reg 5 d RdE [4:0] $end
$var reg 5 e RsE [4:0] $end
$var reg 5 f RtE [4:0] $end
$var reg 32 g data11 [31:0] $end
$var reg 32 h data22 [31:0] $end
$var reg 1 3 memToRegE $end
$var reg 1 1 memWriteE $end
$var reg 1 / regDstE $end
$var reg 1 - regWriteE $end
$var reg 32 i signImmE [31:0] $end
$upscope $end
$scope module IFtoIDReg_top $end
$var wire 1 " clk $end
$var wire 1 ! reset $end
$var wire 32 j outPC [31:0] $end
$var wire 32 k instruction [31:0] $end
$var reg 32 l PCReg [31:0] $end
$var reg 32 m instructionD [31:0] $end
$upscope $end
$scope module cu $end
$var wire 1 " clk $end
$var wire 32 n instruction [31:0] $end
$var reg 4 o ALUControlD [3:0] $end
$var reg 2 p ALUOp [1:0] $end
$var reg 1 O ALUSrcD $end
$var reg 1 L BNEType $end
$var reg 1 A branchD $end
$var reg 1 4 memToRegD $end
$var reg 1 2 memWriteD $end
$var reg 1 0 regDstD $end
$var reg 1 . regWriteD $end
$upscope $end
$scope module instructionDecode_p $end
$var wire 4 q ALUControlD [3:0] $end
$var wire 2 r ALUOp [1:0] $end
$var wire 1 O ALUSrcD $end
$var wire 1 L BNEType $end
$var wire 32 s PCReg [31:0] $end
$var wire 1 A branchD $end
$var wire 1 " clk $end
$var wire 1 ; flagALU $end
$var wire 32 t instruction [31:0] $end
$var wire 32 u valueInput [31:0] $end
$var wire 32 v valueOutput2 [31:0] $end
$var wire 32 w valueOutput1 [31:0] $end
$var wire 1 9 flag2 $end
$var wire 1 : flag1 $end
$var reg 1 I PCSrcD $end
$var reg 32 x PCbranchD [31:0] $end
$var reg 5 y RdD [4:0] $end
$var reg 5 z RsD [4:0] $end
$var reg 5 { RtD [4:0] $end
$var reg 32 | data1 [31:0] $end
$var reg 32 } data2 [31:0] $end
$var reg 32 ~ data2_temp [31:0] $end
$var reg 1 < equalD $end
$var reg 1 !" hazardDetected $end
$var reg 5 "" index1 [4:0] $end
$var reg 5 #" index2 [4:0] $end
$var reg 1 $" notEqualD $end
$var reg 32 %" signImmD [31:0] $end
$upscope $end
$scope module instructionFetch_top $end
$var wire 1 I PCSrcD $end
$var wire 32 &" PCbranchD [31:0] $end
$var wire 1 " clk $end
$var wire 1 % hazardDetected $end
$var wire 32 '" instruction [31:0] $end
$var wire 32 (" PC [31:0] $end
$var reg 32 )" PCReg [31:0] $end
$var reg 32 *" newPCreg [31:0] $end
$upscope $end
$scope module instructionMem_top $end
$var wire 32 +" PC [31:0] $end
$var wire 1 ," rst $end
$var wire 32 -" instruction [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 " clk $end
$var wire 5 ." index1 [4:0] $end
$var wire 5 /" index2 [4:0] $end
$var wire 1 & readEnable $end
$var wire 1 0" regWriteW $end
$var wire 32 1" valueInput [31:0] $end
$var wire 1 ( writeEnable $end
$var reg 1 : flagOutput1 $end
$var reg 1 9 flagOutput2 $end
$var reg 32 2" valueOutput1 [31:0] $end
$var reg 32 3" valueOutput2 [31:0] $end
$var integer 32 4" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 4"
bx 3"
bx 2"
bz 1"
z0"
bx /"
bx ."
b100100000000010000000000000101 -"
z,"
b0 +"
b0 *"
b0 )"
b0 ("
b100100000000010000000000000101 '"
bx &"
bx %"
x$"
bx #"
bx ""
0!"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bz u
bx t
bx s
bz r
bz q
bx p
bx o
bx n
bx m
bx l
b100100000000010000000000000101 k
b0 j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
xY
bx X
bx W
bx V
bz U
bz T
bx S
bx R
bx Q
bx P
xO
xN
bx M
xL
b0 K
bx J
0I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
bx @
bx ?
bx >
bx =
x<
0;
x:
x9
bx 8
bx 7
b100100000000010000000000000101 6
bx 5
x4
x3
x2
x1
x0
x/
x.
x-
bx ,
bx +
bx *
bx )
z(
bz '
z&
0%
bz $
bz #
1"
0!
$end
#50
b0 >
b0 [
b0 }
b0 @
b0 \
b0 |
19
1:
b0 )
b0 v
b0 3"
b0 *
b0 w
b0 2"
0A
00
0O
02
04
b10 S
b10 a
b10 o
1.
0L
b10 Q
b10 `
b10 p
b1 7
b1 #"
b1 /"
b0 8
b0 ""
b0 ."
b100 J
b100 l
b100 s
b100100000000010000000000000101 5
b100100000000010000000000000101 m
b100100000000010000000000000101 n
b100100000000010000000000000101 t
0"
#100
b10100 H
b10100 x
b10100 &"
0$"
1<
b0 G
b0 _
b0 y
b1 C
b1 ]
b1 {
b0 E
b0 ^
b0 z
b101 ,
b101 Z
b101 %"
b100 )"
1"
#150
b10 7
b10 #"
b10 /"
b1000 J
b1000 l
b1000 s
b100100000000100000000000000110 5
b100100000000100000000000000110 m
b100100000000100000000000000110 n
b100100000000100000000000000110 t
b10 P
b10 W
b10 c
b101 +
b101 i
b0 =
b0 h
b0 ?
b0 g
b0 F
b0 d
b1 B
b1 f
b0 D
b0 e
0/
0N
b10 R
b10 V
b10 b
01
03
1-
b100100000000100000000000000110 6
b100100000000100000000000000110 k
b100100000000100000000000000110 '"
b100100000000100000000000000110 -"
b100 K
b100 j
b100 ("
b100 *"
b100 +"
0"
#200
b11100 H
b11100 x
b11100 &"
b1000 )"
b10 C
b10 ]
b10 {
b110 ,
b110 Z
b110 %"
1"
#250
b1 7
b1 #"
b1 /"
b1100 J
b1100 l
b1100 s
b100100000000010000000000000101 5
b100100000000010000000000000101 m
b100100000000010000000000000101 n
b100100000000010000000000000101 t
b100100000000010000000000000101 6
b100100000000010000000000000101 k
b100100000000010000000000000101 '"
b100100000000010000000000000101 -"
b1000 K
b1000 j
b1000 ("
b1000 *"
b1000 +"
b110 +
b110 i
b10 B
b10 f
0"
#300
b1 C
b1 ]
b1 {
b101 ,
b101 Z
b101 %"
b1100 )"
1"
#350
b10 7
b10 #"
b10 /"
b10000 J
b10000 l
b10000 s
b100100000000100000000000000110 5
b100100000000100000000000000110 m
b100100000000100000000000000110 n
b100100000000100000000000000110 t
b101 +
b101 i
b1 B
b1 f
b100100000000100000000000000110 6
b100100000000100000000000000110 k
b100100000000100000000000000110 '"
b100100000000100000000000000110 -"
b1100 K
b1100 j
b1100 ("
b1100 *"
b1100 +"
0"
#400
b100100 H
b100100 x
b100100 &"
b10000 )"
b10 C
b10 ]
b10 {
b110 ,
b110 Z
b110 %"
1"
#450
b1 7
b1 #"
b1 /"
b10100 J
b10100 l
b10100 s
b100100000000010000000000000101 5
b100100000000010000000000000101 m
b100100000000010000000000000101 n
b100100000000010000000000000101 t
b100100000000010000000000000101 6
b100100000000010000000000000101 k
b100100000000010000000000000101 '"
b100100000000010000000000000101 -"
b10000 K
b10000 j
b10000 ("
b10000 *"
b10000 +"
b110 +
b110 i
b10 B
b10 f
0"
#500
b1 C
b1 ]
b1 {
b101 ,
b101 Z
b101 %"
b10100 )"
1"
#550
b10 7
b10 #"
b10 /"
b11000 J
b11000 l
b11000 s
b100100000000100000000000000110 5
b100100000000100000000000000110 m
b100100000000100000000000000110 n
b100100000000100000000000000110 t
b101 +
b101 i
b1 B
b1 f
b100100000000100000000000000110 6
b100100000000100000000000000110 k
b100100000000100000000000000110 '"
b100100000000100000000000000110 -"
b10100 K
b10100 j
b10100 ("
b10100 *"
b10100 +"
0"
#600
b101100 H
b101100 x
b101100 &"
b11000 )"
b10 C
b10 ]
b10 {
b110 ,
b110 Z
b110 %"
1"
#650
b1 7
b1 #"
b1 /"
b11100 J
b11100 l
b11100 s
b100100000000010000000000000101 5
b100100000000010000000000000101 m
b100100000000010000000000000101 n
b100100000000010000000000000101 t
b100100000000010000000000000101 6
b100100000000010000000000000101 k
b100100000000010000000000000101 '"
b100100000000010000000000000101 -"
b11000 K
b11000 j
b11000 ("
b11000 *"
b11000 +"
b110 +
b110 i
b10 B
b10 f
0"
#700
b1 C
b1 ]
b1 {
b101 ,
b101 Z
b101 %"
b11100 )"
1"
#750
b10 7
b10 #"
b10 /"
b100000 J
b100000 l
b100000 s
b100100000000100000000000000110 5
b100100000000100000000000000110 m
b100100000000100000000000000110 n
b100100000000100000000000000110 t
b101 +
b101 i
b1 B
b1 f
b100100000000100000000000000110 6
b100100000000100000000000000110 k
b100100000000100000000000000110 '"
b100100000000100000000000000110 -"
b11100 K
b11100 j
b11100 ("
b11100 *"
b11100 +"
0"
#800
b110100 H
b110100 x
b110100 &"
b100000 )"
b10 C
b10 ]
b10 {
b110 ,
b110 Z
b110 %"
1"
#850
bx >
bx [
bx }
bx @
bx \
bx |
x9
x:
bx )
bx v
bx 3"
bx *
bx w
bx 2"
bx 7
bx #"
bx /"
bx 8
bx ""
bx ."
b100100 J
b100100 l
b100100 s
bx 5
bx m
bx n
bx t
bx 6
bx k
bx '"
bx -"
b100000 K
b100000 j
b100000 ("
b100000 *"
b100000 +"
b110 +
b110 i
b10 B
b10 f
0"
#900
bx H
bx x
bx &"
x$"
x<
bx G
bx _
bx y
bx C
bx ]
bx {
bx E
bx ^
bx z
bx ,
bx Z
bx %"
b100100 )"
1"
#950
b101000 J
b101000 l
b101000 s
bx +
bx i
bx =
bx h
bx ?
bx g
bx F
bx d
bx B
bx f
bx D
bx e
b100100 K
b100100 j
b100100 ("
b100100 *"
b100100 +"
0"
#1000
b101000 )"
1"
#1050
b101100 J
b101100 l
b101100 s
b101000 K
b101000 j
b101000 ("
b101000 *"
b101000 +"
0"
#1100
b101100 )"
1"
#1150
b110000 J
b110000 l
b110000 s
b101100 K
b101100 j
b101100 ("
b101100 *"
b101100 +"
0"
#1200
b110000 )"
1"
#1250
b110100 J
b110100 l
b110100 s
b110000 K
b110000 j
b110000 ("
b110000 *"
b110000 +"
0"
#1300
b110100 )"
1"
#1350
b111000 J
b111000 l
b111000 s
b110100 K
b110100 j
b110100 ("
b110100 *"
b110100 +"
0"
#1400
b111000 )"
1"
#1450
b111100 J
b111100 l
b111100 s
b111000 K
b111000 j
b111000 ("
b111000 *"
b111000 +"
0"
#1500
b111100 )"
1"
#1550
b1000000 J
b1000000 l
b1000000 s
b111100 K
b111100 j
b111100 ("
b111100 *"
b111100 +"
0"
#1600
b1000000 )"
1"
#1650
b1000100 J
b1000100 l
b1000100 s
b1000000 K
b1000000 j
b1000000 ("
b1000000 *"
b1000000 +"
0"
#1700
b1000100 )"
1"
#1750
b1001000 J
b1001000 l
b1001000 s
b1000100 K
b1000100 j
b1000100 ("
b1000100 *"
b1000100 +"
0"
#1800
b1001000 )"
1"
#1850
b1001100 J
b1001100 l
b1001100 s
b1001000 K
b1001000 j
b1001000 ("
b1001000 *"
b1001000 +"
0"
#1900
b1001100 )"
1"
#1950
b1010000 J
b1010000 l
b1010000 s
b1001100 K
b1001100 j
b1001100 ("
b1001100 *"
b1001100 +"
0"
#2000
b1010000 )"
1"
#2050
b1010100 J
b1010100 l
b1010100 s
b1010000 K
b1010000 j
b1010000 ("
b1010000 *"
b1010000 +"
0"
#2100
b1010100 )"
1"
#2150
b1011000 J
b1011000 l
b1011000 s
b1010100 K
b1010100 j
b1010100 ("
b1010100 *"
b1010100 +"
0"
#2200
b1011000 )"
1"
#2250
b1011100 J
b1011100 l
b1011100 s
b1011000 K
b1011000 j
b1011000 ("
b1011000 *"
b1011000 +"
0"
#2300
b1011100 )"
1"
#2350
b1100000 J
b1100000 l
b1100000 s
b1011100 K
b1011100 j
b1011100 ("
b1011100 *"
b1011100 +"
0"
#2400
b1100000 )"
1"
#2450
b1100100 J
b1100100 l
b1100100 s
b1100000 K
b1100000 j
b1100000 ("
b1100000 *"
b1100000 +"
0"
#2500
b1100100 )"
1"
